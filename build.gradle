plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-web') {
		// 제외 시킬 패키지 모듈 추가
//		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Jetty
//	implementation 'org.springframework.boot:spring-boot-starter-jetty'

	// undertow
//	implementation 'org.springframework.boot:spring-boot-starter-undertow'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring Security
//	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JPS -> P6Spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// OAuth2.0 (기본적으로 security 의존성을 포함하고 있기 때문에 security를 사용하지 않을경우에는 이것도 같이 의존성에서 제외시켜준다)
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// OAuth2AuthorizedClientService 에서 DB 저장하기 위해 JDBC를 사용
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

}

tasks.named('test') {
	useJUnitPlatform()
}
